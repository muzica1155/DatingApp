import { HttpClient, HttpParams } from '@angular/common/http';
//import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';// we r going to return smthing of an observable
import { map } from 'rxjs/operators';
// import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { Member } from '../_models/member';
import { PaginatedResult } from '../_models/pagination';
import { UserParams } from '../_models/userParams';

// const httpOptions = {
//   headers: new HttpHeaders({ 
//     Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user'))?.token 
//   })//unspohisticated code we got our token being stored in to be options and then we need to send it with every request we make from our service not particularly clean

// }// our endpoint is protected by authentication which is users ///get token from localStorage

@Injectable({
  providedIn: 'root'
})
export class MembersService {//services are singleton they're instantiated when a component needs the services and that it operates as a singleton and it stays alive until the application is closed 
  //services make a good candidate for storing ur app state 
  //there are other state management solutions there's such things as ReDucks u could add to ur app here you could add mobacks toomuch for this app no need angular has services and redacts or molbeck would be overkill 
  // use our service to store our data service
  baseUrl = environment.apiUrl;
  members: Member[] = [];//if we get info from our members then that what we r going to return 

//pagination setting

  // paginatedResult: PaginatedResult<Member[]> = new PaginatedResult<Member[]>();//set up a property for our patinated results // take our class parameters of our paginatedResult
 //paginatedResult:// this is what w egonna store our results in 
  constructor(private http: HttpClient) { }
  //getMembers(): Member[] //not working bcoz we r not returning a members arrey fromthis what we r returning
  // Observable<Member[]>//
  getMembers(userParams: UserParams)
  // getMembers(page?: number, itemsPerPage?: number) //Observable<Member[]>{// to much specified type too many place here
  //pagination// getMembers(page?) specify page which can be null we'll at the optional parameter there going to be type of number & then we'll have our 
  
  //(page?: number, itemsPerPage?: number)// there is lot more thing to pass in now make an object when u get more than three or four propertirs that u r passing in as parameters it gets really messy
  //create a class to store our userPrem's on the client as well 
  {
     let params = this.getPaginationHeaders(userParams.pageNumber, userParams.pageSize);// after pagination
     
     params = params.append('minAge', userParams.minAge.toString());// // pass in this ones that we wnat to adjust for this specific method // what our params r going to be for this is we r going to have a middle age & this is going to 
     
     params = params.append('maxAge', userParams.maxAge.toString());

     params = params.append('gender', userParams.gender);


    //     let params = new HttpParams(); // ability toserialize our parameters & thi is going to take care of adding this on to our query string
    //    if (page !== null && itemsPerPage !== null) //double check to see if we got a page & make sure its not equal to null & also double check that itmes perpage is also not equal to null
    //        {//otherwise we r just goingt o stick with the default & let the server return what he wnat to 
    //         params = params.append('pageNumber', page.toString()); //('pageNumber')// this is our query string 
    // //page.toString());//query string is a string we neeed to make th epage .toString()
    //         params = params.append('pageSize', itemsPerPage.toString());
    //        }

    //  if (this.members.length > 0) return of(this.members);
      //dont forget we need to return this as observable bcoz our client our component is going to be observing this data
    //we can use of operator from Rxjs
    //if we have the members then we can return the members from the service as an observable than set the members once we have gone & made the effort to get them from the API 
    //  return this.http.get<Member[]>(this.baseUrl + 'users', {observe: 'response', params}).pipe
    //  //pagination// 
    //  //this return method is we need to pass up our parameters here //users').pipe//
    //  //this kind changes bcoz when we r just using HttpGet normally thi si going to give us the response body when we r observing the response & we use this to pass up the parameters that we have created here then we get the full response back 
    //  //we dont it doesn't go & get the body of the response for us we all need to do that ourselves 
    //  (
    //    map(response => {
    //      this.paginatedResult.result = response.body;
    //      // our members array is going to be contained inside here 

    //       if (response.headers.get('Pagination') !== null)//check our pagination headers 
    //       {
    //         this.paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));

    //       }
    //       return this.paginatedResult;// we r going to need to do things differntly inside member list component for now we r getting this memebers 

    //    })
    //   //  map(members => {
    //   //    this.members = members;//the map operator returns the values as an observable when we return from the map we r returning these as an observable doing same in both methods 
    //   //   // we r returning unobservable of the members from here & the same from here as well 
    //   //  return members;
    //   // })
    //   )///using typescript inference if not than add specific types wat we need is most amount of type safety the most amount of intellisense with the least 
   
    // return this.newMethod(params)
    return this.getPaginatedResult<Member[]>(this.baseUrl + 'users', params);// we have to give this type parameters bcoz we specified a type here //getPaginatedResult<T>(url,// 
    //we need to tell it what type of pagiantedResult we r getting from this 

  }//+ 'user')// members endpoint is users //httpOptions)// pass option we need to get members 
  // private newMethod(params: HttpParams) 
//   private getPaginatedResult<T>(url, params) 
  
//   {

//     const paginatedResult: PaginatedResult<T> = new PaginatedResult<T>();//set up a property for our patinated results // take our class parameters of our paginatedResult

//     //const paginatedResult: PaginatedResult<Member[]> = new PaginatedResult<Member[]>();

//     // return this.http.get<Member[]>(this.baseUrl + 'users', { observe: 'response', params }).pipe(
//       return this.http.get<T>(url, { observe: 'response', params }).pipe( //we will make this generic swap this this.http.get<Member[]>(this.baseUrl + 
//       //return this.http.get<Member[]>(this.baseUrl + 'users', { observe: 'response', params }).pipe(
//         map(response => {
//         // this.paginatedResult.result = response.body;
//         paginatedResult.result = response.body;

//         if (response.headers.get('Pagination') !== null) {
//           // this.paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));
//           paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));

//         }
//         // return this.paginatedResult;
//         return paginatedResult;

//       })
//     );
//   }

//  ////get<Member[]>(this.baseUrl//only need to specify the type in our request to tell it what we r receiving back from the server
 
//  private getPaginationHeaders(pageNumber: number, pageSize: number)// for easy to access 
//  {// what we going to reutnr from this is the Params
//   let params = new HttpParams(); // ability toserialize our parameters & thi is going to take care of adding this on to our query string
  
//   // //bcoz we r initialzing the page number and a page size we dont need to check to see if we 
//   // if (page !== null && itemsPerPage !== null) 
      

//   // {//otherwise we r just goingt o stick with the default & let the server return what he wnat to 
//       //  params = params.append('pageNumber', page.toString()); //('pageNumber')// this is our query string 
//       params = params.append('pageNumber', pageNumber.toString());
// //page.toString());//query string is a string we neeed to make th epage .toString()
//       //  params = params.append('pageSize', itemsPerPage.toString());
//       params = params.append('pageSize', pageSize.toString());

//       return params;
//       }

 
 
 getMember(username: string) //when we see this is be explicit bcoz there is a danger that r get mmeber method would take a member as parameter and want to tell us if we do that mistake make sure only going to receive a string as its parameter 
 { 
   const member = this.members.find(x => x.username === username); //get mrmber from the members we have inside our service. we still need to accommodate the fact that the user might refresh their page and we dont have anything inside our service 
   //find(x => ) //find is the memer with the same username that we r passing in as a parameter
   if (member !== undefined) return of(member); //
   //go & take a look at what the find method returns is it does not find what we r looking for find method here & find casue a predicate once for each elements of the arry in ascending order until it finds one where the predicate returns true if such an element is found it immediately return the elements value otherwise find retuns undefined
   // what we r looking fro comparison here we r not looking to compare against now we wnat to look for undefined 
   //if we dont have the member then we r going to go & make our API call
   return this.http.get<Member>(this.baseUrl + 'users/' + username);
 }
  updateMember(member: Member)// add a method inside here 
  { return this.http.put(this.baseUrl + 'users', member).pipe(
    map(() => {
      const index = this.members.indexOf(member);//find member that matches that member in our index
      this.members[index] = member;//this go across to our member lists component 
    })//we dont have anything coming back from our http put method our server doesn't give us a response 
    // get the member from the service 
    ) //pass member as object
   //also update our update member bcoz if we r getting our members now from our service then if ew update a number & dont do anyhting with that they go back they r going to go & see the old data that's stored inside here 
   //so we also need to update this when we update our member as well 
  }

  setMainPhoto(photoId: number) //add a method to set the user's MainPhoto
  {
    return this.http.put(this.baseUrl + 'users/set-main-photo/' + photoId, {});//bcoz its a put request we do need to send smthing in the body but what we can send up here is na empty object
  //& that will suffice for our service for the time being 
  }
  deletePhoto(photoId: number)// add a new method in here to delete the photo & well go to photoID
  { 
    return this.http.delete(this.baseUrl + 'users/delete-photo/' + photoId);//Concatenated ur photo straight on to the this method here//'users/delete-photo/' + photoId);// 
  }

  private getPaginatedResult<T>(url, params) 
  
  {

    const paginatedResult: PaginatedResult<T> = new PaginatedResult<T>();//set up a property for our patinated results // take our class parameters of our paginatedResult

    //const paginatedResult: PaginatedResult<Member[]> = new PaginatedResult<Member[]>();

    // return this.http.get<Member[]>(this.baseUrl + 'users', { observe: 'response', params }).pipe(
      return this.http.get<T>(url, { observe: 'response', params }).pipe( //we will make this generic swap this this.http.get<Member[]>(this.baseUrl + 
      //return this.http.get<Member[]>(this.baseUrl + 'users', { observe: 'response', params }).pipe(
        map(response => {
        // this.paginatedResult.result = response.body;
        paginatedResult.result = response.body;

        if (response.headers.get('Pagination') !== null) {
          // this.paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));
          paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));

        }
        // return this.paginatedResult;
        return paginatedResult;

      })
    );
  }

 ////get<Member[]>(this.baseUrl//only need to specify the type in our request to tell it what we r receiving back from the server
 
 private getPaginationHeaders(pageNumber: number, pageSize: number)// for easy to access 
 {// what we going to reutnr from this is the Params
  let params = new HttpParams(); // ability toserialize our parameters & thi is going to take care of adding this on to our query string
  
  // //bcoz we r initialzing the page number and a page size we dont need to check to see if we 
  // if (page !== null && itemsPerPage !== null) 
      

  // {//otherwise we r just goingt o stick with the default & let the server return what he wnat to 
      //  params = params.append('pageNumber', page.toString()); //('pageNumber')// this is our query string 
      params = params.append('pageNumber', pageNumber.toString());
//page.toString());//query string is a string we neeed to make th epage .toString()
      //  params = params.append('pageSize', itemsPerPage.toString());
      params = params.append('pageSize', pageSize.toString());

      return params;
      }


}//get<Member[]>(this.baseUrl//only need to specify the type in our request to tell it what we r receiving back from the server



